link1=https://hub.coursera-notebooks.org/user/kxwsckmtvyzuocblmevjym/notebooks/Week%202/Python%20Basics%20with%20Numpy/Python%20Basics%20With%20Numpy%20v3.ipynb
link2=https://github.com/amarsic1990/Deep-learning/blob/master/Python%20Basics%20with%20numpy.py

# vectorization examples of python
import numpy as np

a = np.random.rand(5,1)
print(a)
print('')
print(a.T)
print('')
print(np.dot(a,a.T))
print('')
print(a.shape)

import  math

def basic_sigmoid(x):
    return 1 / (1 + math.exp(-x))
print(basic_sigmoid(3))


# array of x
x = np.random.random(10)

def sigmoid (x):
    return 1 / (1 + np.exp(-x))
print(x)
print(sigmoid(x))
print('')

# sigmoid derivative
x = np.array([1, 2, 3])

def sigmoid_derivative(x):
    s = 1 / (1+ np.exp(-x))
    ds = s * (1-s)
    return ds

print("sigmoid_derivative(x) = " + str(sigmoid_derivative(x)))
print('')

# image2vector
# This is a 3 by 3 by 2 array, typically images will be
# (num_px_x, num_px_y,3) where 3 represents the RGB values
image = np.array([[[ 0.67826139,  0.29380381],
        [ 0.90714982,  0.52835647],
        [ 0.4215251 ,  0.45017551]],

       [[ 0.92814219,  0.96677647],
        [ 0.85304703,  0.52351845],
        [ 0.19981397,  0.27417313]],

       [[ 0.60659855,  0.00533165],
        [ 0.10820313,  0.49978937],
        [ 0.34144279,  0.94630077]]])

def image2vector(x):
    """
    Argument:
    image -- a numpy array of shape (length, height, depth)

    Returns:
    v -- a vector of shape (length*height*depth, 1)
    """
    return x.reshape (x.shape[0], x.shape[1], x.shape[2],1)
print ("image2vector(image) = " + str(image2vector(image)))
print('')

# normalizerows

x = np.array([
    [0, 3, 4],
    [1, 6, 4]])

def normalizeRows(x):
    """
    Implement a function that normalizes each row of the matrix x (to have unit length).

    Argument:
    x -- A numpy matrix of shape (n, m)

    Returns:
    x -- The normalized (by row) numpy matrix. You are allowed to modify x.
    """
    x_norm = np.linalg.norm(x, axis=1, keepdims=True)
    return x /x_norm

print("normalizeRows(x) = " + str(normalizeRows(x)))

# softmax

x = np.array([
    [9, 2, 5, 0, 0],
    [7, 5, 0, 0 ,0]])

def softmax(x):
    """Calculates the softmax for each row of the input x.

     Your code should work for a row vector and also for matrices of shape (n, m).

     Argument:
     x -- A numpy matrix of shape (n,m)

     Returns:
     s -- A numpy matrix equal to the softmax of x, of shape (n,m)
     """
    x_exp= np.exp(x)
    x_sum = np.sum(x_exp, axis=1, keepdims=True)
    s = x_exp/x_sum
    return s

print("softmax(x) = " + str(softmax(x)))



