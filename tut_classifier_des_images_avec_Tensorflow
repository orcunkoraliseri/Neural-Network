# l'organisation MNIST
# link:  https://www.youtube.com/watch?v=YeRBN2fFoIA&list=PLpEPgC7cUJ4YzbWZE28hBVSO9rHiVNWlf&index=2

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# MNIST data
mnist = input_data.read_data_sets('input/data', one_hot=True)
#print(mnist.train.images.shape)

'''
print(mnist.train.labels[4]) # this defines the label of image 
plt.imshow(mnist.train.images[4].reshape(28,28), cmap='gray')
plt.show()
'''

# Graph Ä±nputs
tf_features = tf.placeholder(tf.float32, [None,784])
tf_targets = tf.placeholder(tf.float32, [None,10])

# Variables
w1 = tf.Variable(tf.random_normal([784,10]))
b1 = tf.Variable(tf.zeros([10]))

# Operations
z1 = tf.matmul(tf_features, w1) + b1
softmax = tf.nn.softmax(z1)# probability

# Error + Train
error = tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_targets, logits=z1)
train = tf.train.GradientDescentOptimizer(0.5).minimize(error)

# Metrics: Accuracy
correct_prediction = tf.equal(tf.argmax(softmax,1), tf.argmax(tf_targets,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    epochs = 1000
    for i in range(epochs):
        batch_features, batch_targets = mnist.train.next_batch(100)
        sess.run(train, feed_dict={tf_features:batch_features,
                                   tf_targets: batch_targets})

    acc = sess.run(accuracy, feed_dict={
        tf_features: mnist.test.images,
        tf_targets: mnist.test.labels
    })

# let's test the algorithm in a more concrete way by examples
    true_class = []
    py_class = []

    for i in range(0,10):
        py= sess.run(softmax, feed_dict={
            tf_features: [mnist.train.images[i]]
        })
        true_class.append(np.argmax(mnist.train.labels[i]))
        py_class.append(np.argmax(py))

    print('true class', true_class )
    print('py class', py_class)
    print('Accuracy', acc)



'''
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    pass

    print('z1', sess.run(z1,feed_dict={
        tf_features: [mnist.train.images[0]]
    }))

    cls = np.argmax(sess.run(softmax, feed_dict={
        tf_features: [mnist.train.images[0]]
    })) # indice for maximum value of 'z1' operation

    sess.run(train, feed_dict={
        tf_features: [mnist.train.images[0]],
        tf_targets: [mnist.train.labels[0]]
    })

    print('cls', cls) # classification for indice of max number
'''
