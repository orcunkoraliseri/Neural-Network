'''Overfitting and underfitting tutorial
link: https://github.com/sibirbil/VeriDefteri/blob/master/Asiri_Eksik_Ogrenme/Asiri_Eksik_Ogrenme.ipynb
   Regression of Non-Linear Model with Polynomial Features
'''
import warnings
warnings.simplefilter('ignore')

import html
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

# linear regression and gradient boosting
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import GradientBoostingClassifier

# classification
from sklearn.datasets import make_classification

# error and cost function
from sklearn.metrics import mean_squared_error, accuracy_score

from sklearn.preprocessing import PolynomialFeatures

# DATA GENERATION (there is linear correlation between each other)
num_obs = 75 # number of observations
np.random.seed(1)
X = np.random.rand(num_obs)*10
y = 2.5 * X + np.random.rand(num_obs)*5

# divide test (%20) and train (%80) data
X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.8,random_state=0)

'''
# visualise raw input data
plt.figure(figsize=(8,8))
plt.scatter(X_train,y_train)
plt.show()
'''


'''BUY CHANGING POLYNOMIAL DEGREE 
   RMSE CAN BE REDUCED
   UP TO 2
'''
# Polynomial Features by generating x, x**2, x**3 degree variables
pf = PolynomialFeatures(degree=2, include_bias=False)

line_X = np.arange(0,11,0.1)

#Polynomial features for fit/transform functions
X_train_new = pf.fit_transform(X_train.reshape(-1,1))
X_test_new = pf.transform(X_test.reshape(-1,1))
line_X_new = pf.transform(line_X.reshape(-1,1))

# MODEL
# let's build non-linear model
y_train = y_train + 80 * np.power(y_train,2) - 4 * np.power(y_train,3)
y_test = X_test + 80 * np.power(y_test,2) - 4 * np.power(y_test,3)

lr = LinearRegression()
lr.fit(X_train_new,y_train)

print("Root Mean Square Error of Train, RMSE: "
      + str(np.sqrt(mean_squared_error(y_train, lr.predict(X_train_new)))))
print("Root Mean Square Error of Test, RMSE: "
      + str(np.sqrt(mean_squared_error(y_test, lr.predict(X_test_new)))))

line_y = lr.predict(line_X_new)

plt.figure(figsize=(8,8))
plt.scatter(X_train,y_train, alpha = 0.3)
plt.scatter(X_test, y_test, c='red', alpha = 0.7)
plt.plot(line_X, line_y, c='green', linewidth=3)
plt.ylim((-30000, 10000))
plt.show()
